---
format: pdf
---

Analyzing Enrollment of Core Classes for CS/MATH/STA/ECON Majors.

```{r setup, include=FALSE}
options(warn = -1)
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(readr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(stringr))
```

```{r}
# Load necessary libraries
library(dplyr)
library(readr)
library(tidyr)
library(ggplot2)
library(stringr)
```

```{r}
# Load the data
data <- read_csv("data/data.csv")

colnames(data)[1] <- "Semester"

# Function to identify academic years based on semesters
identify_academic_year <- function(semester) {
  year <- substr(semester, 2, 4)
  if(substr(semester, 1, 1) == "F") {
    return(paste0("AY", year, "-", as.numeric(year) + 1))
  } else {
    return(paste0("AY", as.numeric(year) - 1, "-", year))
  }
}

# Add academic year column
data$AcademicYear <- sapply(data$Semester, identify_academic_year)

# Group data by academic year, then sum each course's enrollment numbers
yearly_sum <- data %>%
  group_by(AcademicYear) %>%
  summarise(across(-Semester, sum, na.rm = TRUE))

# Now, pivot the data to long format to identify active years easily
data_long <- yearly_sum %>%
  pivot_longer(-AcademicYear, names_to = "Course", values_to = "Enrollment")

# Identify years with any active enrollments (sum of enrollments across courses > 0)
active_years <- data_long %>%
  group_by(AcademicYear) %>%
  summarise(TotalEnrollment = sum(Enrollment, na.rm = TRUE)) %>%
  filter(TotalEnrollment > 0) %>%
  select(AcademicYear)

# Filter the original yearly_sum to include only active years
yearly_sum_active <- yearly_sum %>%
  filter(AcademicYear %in% active_years$AcademicYear)

# Print the yearly sum of enrollments for each course in active years
print(yearly_sum_active)

```

```{r}

# Pivot the data to a long format for easier calculations
data_long <- yearly_sum %>%
  pivot_longer(-AcademicYear, names_to = "Course", values_to = "Enrollment") %>%
  filter(Enrollment > 0) # Ensure we only consider courses with enrollments

# Fill in missing enrollments with 0 for courses not offered in some years
data_long <- data_long %>%
  group_by(Course, AcademicYear) %>%
  summarize(Enrollment = sum(Enrollment, na.rm = TRUE), .groups = 'drop')

# Calculate the percentage change
data_long <- data_long %>%
  arrange(Course, AcademicYear) %>%
  group_by(Course) %>%
  mutate(Percent_Change = if_else(Enrollment == 0, 0, (Enrollment - lag(Enrollment, default = first(Enrollment))) / lag(Enrollment, default = first(Enrollment)) * 100)) %>%
  ungroup()

# Replace NA in Percent_Change with 0 for the first year a course is introduced
data_long$Percent_Change[is.na(data_long$Percent_Change)] <- 0

# View the result
print(data_long)
```

```{r}

# Identify unique course prefixes (assuming course codes are consistent in format)
course_prefixes <- unique(gsub("([A-Z]+).*", "\\1", data_long$Course))

# Print course prefixes for verification
print(course_prefixes)

# Function to plot data for each subject area
plot_subject_area <- function(data, metric, course_prefixes) {
  for(prefix in course_prefixes) {
    current_data <- data %>% 
      filter(str_detect(Course, pattern = paste0("^", prefix))) %>%
      arrange(Course, AcademicYear)
    
    p <- ggplot(current_data, aes(x = AcademicYear, y = !!sym(metric), color = Course, group = Course)) +
      geom_line() +
      geom_point() +
      theme_minimal() +
      labs(title = paste(metric, "for", prefix, "Courses"),
           x = "Academic Year", y = metric, color = "Course") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
    
    print(p)
  }
}

# Identify unique course prefixes
course_prefixes <- unique(str_extract(data_long$Course, "^[A-Z]+"))

# Plot total enrollments for each subject area
plot_subject_area(data_long, "Enrollment", course_prefixes)

# Plot percentage change for each subject area
plot_subject_area(data_long, "Percent_Change", course_prefixes)


```

```{r}

# Loop through each course prefix to fit linear models
model_results <- list()
for(prefix in course_prefixes) {
  # Filter data for the current prefix
  department_subset <- data_long %>%
    filter(grepl(paste0("^", prefix), Course)) %>%
    group_by(AcademicYear) %>%
    summarize(TotalEnrollment = sum(Enrollment, na.rm = TRUE), .groups = 'drop') %>%
    mutate(AcademicYearNumeric = as.numeric(factor(AcademicYear)))

  # Fit the linear model
  model <- lm(TotalEnrollment ~ AcademicYearNumeric, data = department_subset)
  model_results[[prefix]] <- list("model" = model, "data" = department_subset)
}

# Optionally, print summary of models for each prefix
# lapply(model_results, function(x) summary(x$model))

```

```{r}

for(prefix in course_prefixes) {
  department_subset <- model_results[[prefix]]$data
  p <- ggplot(department_subset, aes(x = AcademicYearNumeric, y = TotalEnrollment)) +
    geom_line(aes(color = prefix), size = 1) +  # Line for each prefix
    geom_point(aes(color = prefix), size = 3) +  # Dots for each data point
    geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black", size = 1) +  # Black, dashed trendline
    scale_x_continuous(breaks = department_subset$AcademicYearNumeric, labels = department_subset$AcademicYear) +  
    labs(title = paste("Total Enrollment Trend for", prefix),
         x = "Academic Year", y = "Total Enrollment",
         color = "Course", linetype = "Trendline") +  # Adjust legend title for linetype
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

  print(p)
}



```
